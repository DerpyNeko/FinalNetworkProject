// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FinalProject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FinalProject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FinalProject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FinalProject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FinalProject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FinalProject_2eproto;
namespace FinalProject {
class Bullet;
class BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class GameScene;
class GameSceneDefaultTypeInternal;
extern GameSceneDefaultTypeInternal _GameScene_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class UserInput;
class UserInputDefaultTypeInternal;
extern UserInputDefaultTypeInternal _UserInput_default_instance_;
}  // namespace FinalProject
PROTOBUF_NAMESPACE_OPEN
template<> ::FinalProject::Bullet* Arena::CreateMaybeMessage<::FinalProject::Bullet>(Arena*);
template<> ::FinalProject::GameScene* Arena::CreateMaybeMessage<::FinalProject::GameScene>(Arena*);
template<> ::FinalProject::Player* Arena::CreateMaybeMessage<::FinalProject::Player>(Arena*);
template<> ::FinalProject::UserInput* Arena::CreateMaybeMessage<::FinalProject::UserInput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FinalProject {

// ===================================================================

class UserInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FinalProject.UserInput) */ {
 public:
  UserInput();
  virtual ~UserInput();

  UserInput(const UserInput& from);
  UserInput(UserInput&& from) noexcept
    : UserInput() {
    *this = ::std::move(from);
  }

  inline UserInput& operator=(const UserInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInput& operator=(UserInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInput* internal_default_instance() {
    return reinterpret_cast<const UserInput*>(
               &_UserInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInput& a, UserInput& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInput* New() const final {
    return CreateMaybeMessage<UserInput>(nullptr);
  }

  UserInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInput& from);
  void MergeFrom(const UserInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FinalProject.UserInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FinalProject_2eproto);
    return ::descriptor_table_FinalProject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  ::PROTOBUF_NAMESPACE_ID::int32 input() const;
  void set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input() const;
  void _internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FinalProject.UserInput)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_;
  friend struct ::TableStruct_FinalProject_2eproto;
};
// -------------------------------------------------------------------

class GameScene :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FinalProject.GameScene) */ {
 public:
  GameScene();
  virtual ~GameScene();

  GameScene(const GameScene& from);
  GameScene(GameScene&& from) noexcept
    : GameScene() {
    *this = ::std::move(from);
  }

  inline GameScene& operator=(const GameScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameScene& operator=(GameScene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameScene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameScene* internal_default_instance() {
    return reinterpret_cast<const GameScene*>(
               &_GameScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameScene& a, GameScene& b) {
    a.Swap(&b);
  }
  inline void Swap(GameScene* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameScene* New() const final {
    return CreateMaybeMessage<GameScene>(nullptr);
  }

  GameScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameScene& from);
  void MergeFrom(const GameScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FinalProject.GameScene";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FinalProject_2eproto);
    return ::descriptor_table_FinalProject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kBulletsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .FinalProject.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::FinalProject::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Player >*
      mutable_players();
  private:
  const ::FinalProject::Player& _internal_players(int index) const;
  ::FinalProject::Player* _internal_add_players();
  public:
  const ::FinalProject::Player& players(int index) const;
  ::FinalProject::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Player >&
      players() const;

  // repeated .FinalProject.Bullet bullets = 3;
  int bullets_size() const;
  private:
  int _internal_bullets_size() const;
  public:
  void clear_bullets();
  ::FinalProject::Bullet* mutable_bullets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Bullet >*
      mutable_bullets();
  private:
  const ::FinalProject::Bullet& _internal_bullets(int index) const;
  ::FinalProject::Bullet* _internal_add_bullets();
  public:
  const ::FinalProject::Bullet& bullets(int index) const;
  ::FinalProject::Bullet* add_bullets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Bullet >&
      bullets() const;

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FinalProject.GameScene)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Bullet > bullets_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_FinalProject_2eproto;
};
// -------------------------------------------------------------------

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FinalProject.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FinalProject.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FinalProject_2eproto);
    return ::descriptor_table_FinalProject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // repeated float position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  float _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position() const;
  void _internal_add_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position();
  public:
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position();

  // repeated float velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  float _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_velocity() const;
  void _internal_add_velocity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_velocity();
  public:
  float velocity(int index) const;
  void set_velocity(int index, float value);
  void add_velocity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_velocity();

  // repeated float orientation = 4;
  int orientation_size() const;
  private:
  int _internal_orientation_size() const;
  public:
  void clear_orientation();
  private:
  float _internal_orientation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_orientation() const;
  void _internal_add_orientation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_orientation();
  public:
  float orientation(int index) const;
  void set_orientation(int index, float value);
  void add_orientation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      orientation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_orientation();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FinalProject.Player)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > velocity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_FinalProject_2eproto;
};
// -------------------------------------------------------------------

class Bullet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FinalProject.Bullet) */ {
 public:
  Bullet();
  virtual ~Bullet();

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bullet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return CreateMaybeMessage<Bullet>(nullptr);
  }

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bullet& from);
  void MergeFrom(const Bullet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FinalProject.Bullet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FinalProject_2eproto);
    return ::descriptor_table_FinalProject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // repeated float position = 2;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  float _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position() const;
  void _internal_add_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position();
  public:
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position();

  // repeated float velocity = 3;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  float _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_velocity() const;
  void _internal_add_velocity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_velocity();
  public:
  float velocity(int index) const;
  void set_velocity(int index, float value);
  void add_velocity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_velocity();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FinalProject.Bullet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_FinalProject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInput

// required int32 id = 1;
inline bool UserInput::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInput::has_id() const {
  return _internal_has_id();
}
inline void UserInput::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::id() const {
  // @@protoc_insertion_point(field_get:FinalProject.UserInput.id)
  return _internal_id();
}
inline void UserInput::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void UserInput::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FinalProject.UserInput.id)
}

// required int32 input = 2;
inline bool UserInput::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInput::has_input() const {
  return _internal_has_input();
}
inline void UserInput::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::_internal_input() const {
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::input() const {
  // @@protoc_insertion_point(field_get:FinalProject.UserInput.input)
  return _internal_input();
}
inline void UserInput::_internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  input_ = value;
}
inline void UserInput::set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:FinalProject.UserInput.input)
}

// -------------------------------------------------------------------

// GameScene

// required int32 id = 1;
inline bool GameScene::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameScene::has_id() const {
  return _internal_has_id();
}
inline void GameScene::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameScene::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameScene::id() const {
  // @@protoc_insertion_point(field_get:FinalProject.GameScene.id)
  return _internal_id();
}
inline void GameScene::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void GameScene::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:FinalProject.GameScene.id)
}

// repeated .FinalProject.Player players = 2;
inline int GameScene::_internal_players_size() const {
  return players_.size();
}
inline int GameScene::players_size() const {
  return _internal_players_size();
}
inline void GameScene::clear_players() {
  players_.Clear();
}
inline ::FinalProject::Player* GameScene::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:FinalProject.GameScene.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Player >*
GameScene::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:FinalProject.GameScene.players)
  return &players_;
}
inline const ::FinalProject::Player& GameScene::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::FinalProject::Player& GameScene::players(int index) const {
  // @@protoc_insertion_point(field_get:FinalProject.GameScene.players)
  return _internal_players(index);
}
inline ::FinalProject::Player* GameScene::_internal_add_players() {
  return players_.Add();
}
inline ::FinalProject::Player* GameScene::add_players() {
  // @@protoc_insertion_point(field_add:FinalProject.GameScene.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Player >&
GameScene::players() const {
  // @@protoc_insertion_point(field_list:FinalProject.GameScene.players)
  return players_;
}

// repeated .FinalProject.Bullet bullets = 3;
inline int GameScene::_internal_bullets_size() const {
  return bullets_.size();
}
inline int GameScene::bullets_size() const {
  return _internal_bullets_size();
}
inline void GameScene::clear_bullets() {
  bullets_.Clear();
}
inline ::FinalProject::Bullet* GameScene::mutable_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:FinalProject.GameScene.bullets)
  return bullets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Bullet >*
GameScene::mutable_bullets() {
  // @@protoc_insertion_point(field_mutable_list:FinalProject.GameScene.bullets)
  return &bullets_;
}
inline const ::FinalProject::Bullet& GameScene::_internal_bullets(int index) const {
  return bullets_.Get(index);
}
inline const ::FinalProject::Bullet& GameScene::bullets(int index) const {
  // @@protoc_insertion_point(field_get:FinalProject.GameScene.bullets)
  return _internal_bullets(index);
}
inline ::FinalProject::Bullet* GameScene::_internal_add_bullets() {
  return bullets_.Add();
}
inline ::FinalProject::Bullet* GameScene::add_bullets() {
  // @@protoc_insertion_point(field_add:FinalProject.GameScene.bullets)
  return _internal_add_bullets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FinalProject::Bullet >&
GameScene::bullets() const {
  // @@protoc_insertion_point(field_list:FinalProject.GameScene.bullets)
  return bullets_;
}

// -------------------------------------------------------------------

// Player

// required int32 state = 1;
inline bool Player::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Player::has_state() const {
  return _internal_has_state();
}
inline void Player::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::state() const {
  // @@protoc_insertion_point(field_get:FinalProject.Player.state)
  return _internal_state();
}
inline void Player::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
}
inline void Player::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:FinalProject.Player.state)
}

// repeated float position = 2;
inline int Player::_internal_position_size() const {
  return position_.size();
}
inline int Player::position_size() const {
  return _internal_position_size();
}
inline void Player::clear_position() {
  position_.Clear();
}
inline float Player::_internal_position(int index) const {
  return position_.Get(index);
}
inline float Player::position(int index) const {
  // @@protoc_insertion_point(field_get:FinalProject.Player.position)
  return _internal_position(index);
}
inline void Player::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:FinalProject.Player.position)
}
inline void Player::_internal_add_position(float value) {
  position_.Add(value);
}
inline void Player::add_position(float value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:FinalProject.Player.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Player::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Player::position() const {
  // @@protoc_insertion_point(field_list:FinalProject.Player.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Player::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Player::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:FinalProject.Player.position)
  return _internal_mutable_position();
}

// repeated float velocity = 3;
inline int Player::_internal_velocity_size() const {
  return velocity_.size();
}
inline int Player::velocity_size() const {
  return _internal_velocity_size();
}
inline void Player::clear_velocity() {
  velocity_.Clear();
}
inline float Player::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline float Player::velocity(int index) const {
  // @@protoc_insertion_point(field_get:FinalProject.Player.velocity)
  return _internal_velocity(index);
}
inline void Player::set_velocity(int index, float value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:FinalProject.Player.velocity)
}
inline void Player::_internal_add_velocity(float value) {
  velocity_.Add(value);
}
inline void Player::add_velocity(float value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:FinalProject.Player.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Player::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Player::velocity() const {
  // @@protoc_insertion_point(field_list:FinalProject.Player.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Player::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Player::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:FinalProject.Player.velocity)
  return _internal_mutable_velocity();
}

// repeated float orientation = 4;
inline int Player::_internal_orientation_size() const {
  return orientation_.size();
}
inline int Player::orientation_size() const {
  return _internal_orientation_size();
}
inline void Player::clear_orientation() {
  orientation_.Clear();
}
inline float Player::_internal_orientation(int index) const {
  return orientation_.Get(index);
}
inline float Player::orientation(int index) const {
  // @@protoc_insertion_point(field_get:FinalProject.Player.orientation)
  return _internal_orientation(index);
}
inline void Player::set_orientation(int index, float value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:FinalProject.Player.orientation)
}
inline void Player::_internal_add_orientation(float value) {
  orientation_.Add(value);
}
inline void Player::add_orientation(float value) {
  _internal_add_orientation(value);
  // @@protoc_insertion_point(field_add:FinalProject.Player.orientation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Player::_internal_orientation() const {
  return orientation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Player::orientation() const {
  // @@protoc_insertion_point(field_list:FinalProject.Player.orientation)
  return _internal_orientation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Player::_internal_mutable_orientation() {
  return &orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Player::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:FinalProject.Player.orientation)
  return _internal_mutable_orientation();
}

// -------------------------------------------------------------------

// Bullet

// required int32 state = 1;
inline bool Bullet::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bullet::has_state() const {
  return _internal_has_state();
}
inline void Bullet::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::state() const {
  // @@protoc_insertion_point(field_get:FinalProject.Bullet.state)
  return _internal_state();
}
inline void Bullet::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
}
inline void Bullet::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:FinalProject.Bullet.state)
}

// repeated float position = 2;
inline int Bullet::_internal_position_size() const {
  return position_.size();
}
inline int Bullet::position_size() const {
  return _internal_position_size();
}
inline void Bullet::clear_position() {
  position_.Clear();
}
inline float Bullet::_internal_position(int index) const {
  return position_.Get(index);
}
inline float Bullet::position(int index) const {
  // @@protoc_insertion_point(field_get:FinalProject.Bullet.position)
  return _internal_position(index);
}
inline void Bullet::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:FinalProject.Bullet.position)
}
inline void Bullet::_internal_add_position(float value) {
  position_.Add(value);
}
inline void Bullet::add_position(float value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:FinalProject.Bullet.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Bullet::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Bullet::position() const {
  // @@protoc_insertion_point(field_list:FinalProject.Bullet.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Bullet::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Bullet::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:FinalProject.Bullet.position)
  return _internal_mutable_position();
}

// repeated float velocity = 3;
inline int Bullet::_internal_velocity_size() const {
  return velocity_.size();
}
inline int Bullet::velocity_size() const {
  return _internal_velocity_size();
}
inline void Bullet::clear_velocity() {
  velocity_.Clear();
}
inline float Bullet::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline float Bullet::velocity(int index) const {
  // @@protoc_insertion_point(field_get:FinalProject.Bullet.velocity)
  return _internal_velocity(index);
}
inline void Bullet::set_velocity(int index, float value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:FinalProject.Bullet.velocity)
}
inline void Bullet::_internal_add_velocity(float value) {
  velocity_.Add(value);
}
inline void Bullet::add_velocity(float value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:FinalProject.Bullet.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Bullet::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Bullet::velocity() const {
  // @@protoc_insertion_point(field_list:FinalProject.Bullet.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Bullet::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Bullet::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:FinalProject.Bullet.velocity)
  return _internal_mutable_velocity();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FinalProject

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FinalProject_2eproto
